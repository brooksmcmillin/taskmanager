---
// src/components/TodoForm.astro
---

<div class="todo-form-container">
  <form id="todo-form" class="space-y-4 card">
    <div>
      <label for="project_id" class="block text-sm font-medium text-gray-700">Project</label>
      <select 
        id="project_id" 
        name="project_id" 
        class="form-select mt-1"
      >
        <option value="">Select a project...</option>
      </select>
    </div>

    <div>
      <label for="title" class="block text-sm font-medium text-gray-700">Title</label>
      <input 
        type="text" 
        id="title" 
        name="title" 
        required
        class="form-input mt-1"
      >
    </div>

    <div>
      <label for="description" class="block text-sm font-medium text-gray-700">Description</label>
      <textarea 
        id="description" 
        name="description" 
        rows="3"
        class="form-textarea mt-1"
      ></textarea>
    </div>

    <div class="grid grid-cols-2 gap-4">
      <div>
        <label for="priority" class="block text-sm font-medium text-gray-700">Priority</label>
        <select 
          id="priority" 
          name="priority"
          class="form-select mt-1"
        >
          <option value="low">Low</option>
          <option value="medium" selected>Medium</option>
          <option value="high">High</option>
          <option value="urgent">Urgent</option>
        </select>
      </div>

      <div>
        <label for="estimated_hours" class="block text-sm font-medium text-gray-700">Estimated Hours</label>
        <input 
          type="number" 
          id="estimated_hours" 
          name="estimated_hours" 
          step="0.5" 
          min="0.5" 
          value="1.0"
          class="form-input mt-1"
        >
      </div>
    </div>

    <div>
      <label for="due_date" class="block text-sm font-medium text-gray-700">Due Date (Optional)</label>
      <input 
        type="date" 
        id="due_date" 
        name="due_date"
        class="form-input mt-1"
      >
    </div>

    <div>
      <label for="tags" class="block text-sm font-medium text-gray-700">Tags (comma-separated)</label>
      <input 
        type="text" 
        id="tags" 
        name="tags" 
        placeholder="backend, urgent, review"
        class="form-input mt-1"
      >
    </div>

    <button 
      type="submit"
      class="btn btn-primary w-full"
    >
      Add Todo
    </button>
  </form>
</div>

<script>
  // Load projects into dropdown
  async function loadProjects() {
    try {
      const response = await fetch('/api/projects');
      
      if (!response.ok) {
        throw new Error('Failed to load projects');
      }
      
      const projects = await response.json();
      const select = document.getElementById('project_id');
      
      // Clear existing options except the first one
      while (select.children.length > 1) {
        select.removeChild(select.lastChild);
      }
      
      projects.forEach(project => {
        const option = document.createElement('option');
        option.value = project.id;
        option.textContent = project.name;
        select.appendChild(option);
      });
    } catch (error) {
      console.error('Failed to load projects:', error);
    }
  }

  // Handle form submission
  document.getElementById('todo-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const todoData = {
      project_id: formData.get('project_id') || null,
      title: formData.get('title'),
      description: formData.get('description'),
      priority: formData.get('priority'),
      estimated_hours: parseFloat(formData.get('estimated_hours')),
      due_date: formData.get('due_date') || null,
      tags: formData.get('tags') ? formData.get('tags').split(',').map(t => t.trim()) : [],
      context: 'work'
    };

    try {
      const response = await fetch('/api/todos', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(todoData)
      });

      if (response.ok) {
        e.target.reset();
        // Trigger a custom event to refresh the todo list
        window.dispatchEvent(new CustomEvent('todoAdded'));
        alert('Todo added successfully!');
      } else if (response.status === 401) {
        window.location.href = '/login';
      } else {
        const error = await response.json();
        alert('Error creating todo: ' + (error.message || 'Unknown error'));
      }
    } catch (error) {
      alert('Network error: ' + error.message);
    }
  });

  // Load projects when page loads
  loadProjects();
</script>

<style>
  .todo-form-container {
    max-width: 600px;
  }
</style>
