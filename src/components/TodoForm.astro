---
// src/components/TodoForm.astro
---

<div class="todo-form-container">
  <form id="todo-form" class="card">
    <div class="form-grid">
      <!-- Left Column -->
      <div class="form-column">
        <div>
          <label
            for="project_id"
            class="block text-sm font-medium text-gray-700">Project</label
          >
          <select id="project_id" name="project_id" class="form-select mt-1">
            <option value="">Select a project...</option>
          </select>
        </div>

        <div>
          <label for="title" class="block text-sm font-medium text-gray-700"
            >Title</label
          >
          <input
            type="text"
            id="title"
            name="title"
            required
            class="form-input mt-1"
          />
        </div>

        <div>
          <label
            for="description"
            class="block text-sm font-medium text-gray-700">Description</label
          >
          <textarea
            id="description"
            name="description"
            rows="3"
            class="form-textarea mt-1"></textarea>
        </div>

        <div>
          <label for="tags" class="block text-sm font-medium text-gray-700"
            >Tags (comma-separated)</label
          >
          <input
            type="text"
            id="tags"
            name="tags"
            placeholder="backend, urgent, review"
            class="form-input mt-1"
          />
        </div>
      </div>

      <!-- Right Column -->
      <div class="form-column">
        <div>
          <label for="priority" class="block text-sm font-medium text-gray-700"
            >Priority</label
          >
          <select id="priority" name="priority" class="form-select mt-1">
            <option value="low">Low</option>
            <option value="medium" selected>Medium</option>
            <option value="high">High</option>
            <option value="urgent">Urgent</option>
          </select>
        </div>

        <div>
          <label
            for="estimated_hours"
            class="block text-sm font-medium text-gray-700"
            >Estimated Hours</label
          >
          <input
            type="number"
            id="estimated_hours"
            name="estimated_hours"
            step="0.5"
            min="0.5"
            value="1.0"
            class="form-input mt-1"
          />
        </div>

        <div>
          <label for="due_date" class="block text-sm font-medium text-gray-700"
            >Due Date (Optional)</label
          >
          <input
            type="date"
            id="due_date"
            name="due_date"
            class="form-input mt-1"
          />
        </div>

        <div>
          <label
            for="time_horizon"
            class="block text-sm font-medium text-gray-700">Time Horizon</label
          >
          <select
            id="time_horizon"
            name="time_horizon"
            class="form-select mt-1"
          >
            <option value="">No specific timeframe</option>
            <option value="today">Today</option>
            <option value="this_week">This Week</option>
            <option value="next_week">Next Week</option>
            <option value="this_month">This Month</option>
            <option value="next_month">Next Month</option>
            <option value="this_quarter">This Quarter</option>
            <option value="next_quarter">Next Quarter</option>
            <option value="this_year">This Year</option>
            <option value="next_year">Next Year</option>
            <option value="someday">Someday</option>
          </select>
        </div>
      </div>
    </div>

    <!-- Submit Button - Full Width -->
    <div class="form-submit">
      <button type="submit" class="btn btn-primary w-full" id="submit-btn">
        Add Todo
      </button>
    </div>
  </form>
</div>

<script>
  // Load projects into dropdown
  async function loadProjects() {
    try {
      const response = await fetch('/api/projects');

      if (!response.ok) {
        throw new Error('Failed to load projects');
      }

      const projects = await response.json();
      const select = document.getElementById('project_id');

      // Clear existing options except the first one
      while (select.children.length > 1) {
        select.removeChild(select.lastChild);
      }

      projects.forEach((project) => {
        const option = document.createElement('option');
        option.value = project.id;
        option.textContent = project.name;
        select.appendChild(option);
      });
    } catch (error) {
      console.error('Failed to load projects:', error);
    }
  }

  // Global variable to track edit mode
  window.editingTodoId = null;

  // Function to populate form for editing
  window.populateFormForEdit = function (todo) {
    window.editingTodoId = todo.id;

    document.getElementById('project_id').value = todo.project_id || '';
    document.getElementById('title').value = todo.title;
    document.getElementById('description').value = todo.description || '';
    document.getElementById('priority').value = todo.priority;
    document.getElementById('estimated_hours').value = todo.estimated_hours;
    document.getElementById('due_date').value = todo.due_date || '';
    document.getElementById('time_horizon').value = todo.time_horizon || '';
      //document.getElementById('tags').value = todo.tags &&
      //? todo.tags.join(', ')
      //: '';

    // Update button text and modal title
    document.getElementById('submit-btn').textContent = 'Update Todo';
    document.querySelector('.modal-header h2').textContent = 'Edit Todo';
  };

  // Function to reset form to add mode
  window.resetFormToAddMode = function () {
    window.editingTodoId = null;
    document.getElementById('submit-btn').textContent = 'Add Todo';
    document.querySelector('.modal-header h2').textContent = 'Add New Todo';
  };

  // Handle form submission
  document.getElementById('todo-form').addEventListener('submit', async (e) => {
    e.preventDefault();

    const formData = new FormData(e.target);
    const todoData = {
      project_id: formData.get('project_id') || null,
      title: formData.get('title'),
      description: formData.get('description'),
      priority: formData.get('priority'),
      estimated_hours: parseFloat(formData.get('estimated_hours')),
      due_date: formData.get('due_date') || null,
      time_horizon: formData.get('time_horizon') || null,
      tags: formData.get('tags')
        ? formData
            .get('tags')
            .split(',')
            .map((t) => t.trim())
        : [],
      context: 'work',
    };

    const isEditing = window.editingTodoId !== null;
    const url = isEditing ? `/api/todos/${window.editingTodoId}` : '/api/todos';
    const method = isEditing ? 'PUT' : 'POST';

    try {
      const response = await fetch(url, {
        method: method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(todoData),
      });

      if (response.ok) {
        e.target.reset();
        window.resetFormToAddMode();
        // Close the modal
        const modal = document.getElementById('todoModal');
        if (modal) {
          modal.classList.remove('show');
          document.body.style.overflow = '';
        }
        // Trigger a custom event to refresh the todo list
        window.dispatchEvent(new CustomEvent('todoAdded'));
      } else if (response.status === 401) {
        window.location.href = '/login';
      } else {
        const error = await response.json();
        alert(
          `Error ${isEditing ? 'updating' : 'creating'} todo: ` +
            (error.message || 'Unknown error')
        );
      }
    } catch (error) {
      alert('Network error: ' + error.message);
    }
  });

  // Load projects when page loads
  loadProjects();
</script>

<style>
  .todo-form-container {
    max-width: 600px;
  }

  .form-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 24px;
    margin-bottom: 24px;
  }

  .form-column {
    display: flex;
    flex-direction: column;
    gap: 16px;
  }

  .form-submit {
    border-top: 1px solid #e5e7eb;
    padding-top: 20px;
  }

  /* Mobile responsiveness */
  @media (max-width: 640px) {
    .form-grid {
      grid-template-columns: 1fr;
      gap: 16px;
    }
  }
</style>
