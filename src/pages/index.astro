---
import Layout from '../layouts/Layout.astro';
import TodoModal from '../components/TodoModal.astro';
import DragDropCalendar from '../components/DragDropCalendar.astro';

const user = Astro.locals.user;
---

<Layout title="Todo Manager" user={user}>
  <main class="container py-8">
    <h1 class="text-3xl font-bold text-gray-900 mb-8">Todo Manager</h1>

    <!-- View Toggle -->
    <div class="flex justify-center mb-6">
      <div class="flex gap-4">
        <button id="list-view-btn" class="btn btn-primary btn-med"
          >List View</button
        >
        <button id="calendar-view-btn" class="btn btn-secondary btn-med"
          >Calendar View</button
        >
      </div>
    </div>

    <!-- List View -->
    <TodoModal />
    <div id="list-view">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-xl font-semibold">Current Todos</h2>
        <select id="time-horizon-filter" class="form-select text-sm">
          <option value="">All Time Horizons</option>
          <option value="today">Today</option>
          <option value="this_week">This Week</option>
          <option value="next_week">Next Week</option>
          <option value="this_month">This Month</option>
          <option value="next_month">Next Month</option>
          <option value="this_quarter">This Quarter</option>
          <option value="next_quarter">Next Quarter</option>
          <option value="this_year">This Year</option>
          <option value="next_year">Next Year</option>
          <option value="someday">Someday</option>
        </select>
      </div>
      <div id="todo-lists" class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <!-- Todos will be loaded here -->
      </div>
    </div>

    <!-- Calendar View -->
    <div id="calendar-view" class="hidden">
      <DragDropCalendar />
    </div>
  </main>
</Layout>

<script>
  async function loadTodos() {
    try {
      const timeHorizonFilter =
        document.getElementById('time-horizon-filter')?.value || '';
      const apiUrl = `/api/todos?status=pending${timeHorizonFilter ? `&time_horizon=${timeHorizonFilter}` : ''}`;

      const [todosResponse, projectsResponse] = await Promise.all([
        fetch(apiUrl),
        fetch('/api/projects'),
      ]);

      if (!todosResponse.ok || !projectsResponse.ok) {
        throw new Error('Failed to load data');
      }

      const todos = await todosResponse.json();
      const projects = await projectsResponse.json();

      const container = document.getElementById('todo-lists');
      container.innerHTML = '';

      // Group todos by project
      const todosByProject = todos.reduce((acc, todo) => {
        const projectName = todo.project_name || 'No Project';
        if (!acc[projectName]) acc[projectName] = [];
        acc[projectName].push(todo);
        return acc;
      }, {});

      const sortedTodosByProject = Object.keys(todosByProject)
        .sort()
        .reduce((acc, projectName) => {
          acc[projectName] = todosByProject[projectName];
          return acc;
        }, {});

      // Render each project's todos
      Object.entries(sortedTodosByProject).forEach(
        ([projectName, projectTodos]) => {
          const projectDiv = document.createElement('div');
          projectDiv.className = 'card';
          const projectId = `project-${projectName.replace(/\s+/g, '-').toLowerCase()}`;

          // Check if project was previously minimized
          const isMinimized =
            localStorage.getItem(`${projectId}-minimized`) === 'true';

          projectDiv.innerHTML = `
          <div class="flex items-center justify-between mb-3">
            <h3 class="font-semibold text-lg text-gray-800">${projectName}</h3>
            <button 
              onclick="toggleProject('${projectId}')"
              class="btn btn-sm btn-secondary project-toggle"
              title="${isMinimized ? 'Expand' : 'Minimize'} project"
            >
              ${isMinimized ? '▲' : '▼'}
            </button>
          </div>
          <div id="${projectId}-content" class="space-y-2 ${isMinimized ? 'hidden' : ''}">
            ${projectTodos
              .map(
                (todo) => `
              <div class="flex items-center justify-between p-3 border rounded">
                <div class="flex-1">
                  <div class="font-medium">${todo.title}</div>
                  <div class="text-sm text-gray-600">${todo.description || ''}</div>
                  <div class="text-xs text-gray-500 mt-1">
                    Priority: ${todo.priority} | Est: ${todo.estimated_hours}h
                    ${todo.due_date ? ` | Due: ${new Date(todo.due_date).toLocaleDateString()}` : ''}
                    ${todo.time_horizon ? ` | ${todo.time_horizon.replace('_', ' ').replace(/\b\w/g, (l) => l.toUpperCase())}` : ''}
                  </div>
                </div>
                <div class="flex gap-3 ml-4">
                  <button 
                    onclick="editTodo(${todo.id})"
                    class="btn btn-secondary btn-sm"
                    title="Edit todo"
                  >
                    ✏️
                  </button>
                  <button 
                    onclick="completeTodo(${todo.id})"
                    class="btn btn-success btn-sm"
                    title="Mark as complete"
                  >
                    ✓
                  </button>
                </div>
              </div>
            `
              )
              .join('')}
          </div>
        `;

          container.appendChild(projectDiv);
        }
      );
    } catch (error) {
      console.error('Failed to load todos:', error);
    }
  }

  window.editTodo = async function (todoId) {
    console.log('Editing Todo...');
    try {
      const response = await fetch(`/api/todos/${todoId}`);
      if (response.ok) {
        const todo = await response.json();
        window.openEditModal(todo);
      } else {
        alert('Failed to load todo for editing');
      }
    } catch (error) {
      alert('Error: ' + error.message);
    }
  };

  window.completeTodo = async function (todoId) {
    const actualHours = prompt('How many hours did this take?');
    if (!actualHours) return;

    try {
      const response = await fetch(`/api/todos/${todoId}/complete`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ actual_hours: parseFloat(actualHours) }),
      });

      if (response.ok) {
        loadTodos(); // Refresh the list
      } else if (response.status === 401) {
        window.location.href = '/login';
      } else {
        alert('Failed to complete todo');
      }
    } catch (error) {
      alert('Error: ' + error.message);
    }
  };

  window.toggleProject = function (projectId) {
    const content = document.getElementById(`${projectId}-content`);
    const button = document.querySelector(
      `button[onclick="toggleProject('${projectId}')"]`
    );

    if (content && button) {
      const isHidden = content.classList.contains('hidden');

      if (isHidden) {
        content.classList.remove('hidden');
        button.innerHTML = '▼';
        button.title = 'Minimize project';
        localStorage.setItem(`${projectId}-minimized`, 'false');
      } else {
        content.classList.add('hidden');
        button.innerHTML = '▲';
        button.title = 'Expand project';
        localStorage.setItem(`${projectId}-minimized`, 'true');
      }
    }
  };

  // Load todos when page loads
  loadTodos();

  // Add event listener for time horizon filter
  document
    .getElementById('time-horizon-filter')
    .addEventListener('change', loadTodos);

  // Listen for new todos to refresh the list
  window.addEventListener('todoAdded', loadTodos);

  // View toggle functionality
  function setupViewToggle() {
    const listViewBtn = document.getElementById('list-view-btn');
    const calendarViewBtn = document.getElementById('calendar-view-btn');
    const listView = document.getElementById('list-view');
    const calendarView = document.getElementById('calendar-view');

    listViewBtn.addEventListener('click', () => {
      listView.classList.remove('hidden');
      calendarView.classList.add('hidden');
      listViewBtn.classList.remove('btn-secondary');
      listViewBtn.classList.add('btn-primary');
      calendarViewBtn.classList.remove('btn-primary');
      calendarViewBtn.classList.add('btn-secondary');
    });

    calendarViewBtn.addEventListener('click', () => {
      calendarView.classList.remove('hidden');
      listView.classList.add('hidden');
      calendarViewBtn.classList.remove('btn-secondary');
      calendarViewBtn.classList.add('btn-primary');
      listViewBtn.classList.remove('btn-primary');
      listViewBtn.classList.add('btn-secondary');
    });
  }

  // Initialize view toggle
  setupViewToggle();
</script>
