---
import Layout from '../layouts/Layout.astro';
import { checkAuth } from '../lib/serverAuth.js';

const auth = checkAuth(Astro.request);
if (auth.redirect) return auth.redirect;
const user = auth.user;
---

<Layout title="Daily Planner" user={user}>
  <main class="container py-8">
    <div class="max-w-4xl mx-auto">
      <h1 class="text-3xl font-bold text-gray-900 mb-8">Daily Planner</h1>

      <!-- Report Controls -->
      <div class="bg-white rounded-lg shadow-sm border p-6 mb-8">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4 items-end">
          <div>
            <label
              for="report-type"
              class="block text-sm font-medium text-gray-700 mb-2"
              >View Type</label
            >
            <select id="report-type" class="form-select">
              <option value="today">Today</option>
              <option value="tomorrow">Tomorrow</option>
              <option value="this_week">This Week</option>
              <option value="next_week">Next Week</option>
            </select>
          </div>

          <div>
            <label
              for="status-filter"
              class="block text-sm font-medium text-gray-700 mb-2">Status</label
            >
            <select id="status-filter" class="form-select">
              <option value="all">All Tasks</option>
              <option value="pending">Pending Only</option>
              <option value="completed">Completed Only</option>
            </select>
          </div>

          <div class="flex gap-2">
            <button id="generate-report" class="btn btn-primary"
              >Generate Planner</button
            >
            <button
              id="print-report"
              class="btn btn-secondary"
              style="display: none;">Export PDF</button
            >
          </div>
        </div>
      </div>

      <!-- Report Content -->
      <div id="report-container" class="hidden">
        <div
          id="report-content"
          class="bg-white rounded-lg shadow-sm border print-content"
        >
          <!-- Report will be generated here -->
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  // Get today's date in YYYY-MM-DD format
  function getDateWithOffset(daysToAdd = 0) {
    const date = new Date();
    date.setDate(date.getDate() + daysToAdd);
    return date.toISOString().split('T')[0];
  }

  // Get the start of the week (Monday) for a given date
  function getWeekStart(date) {
    const d = new Date(date);
    const day = d.getDay();
    const diff = d.getDate() - day + (day === 0 ? -6 : 1) - 1; // Adjust for Monday start
    const weekStart = new Date(d.setDate(diff));
    return weekStart.toISOString().split('T')[0];
  }

  // Get the end of the week (Sunday) for a given date
  function getWeekEnd(date) {
    const weekStart = new Date(getWeekStart(date));
    const weekEnd = new Date(weekStart);
    weekEnd.setDate(weekStart.getDate() + 6);
    return weekEnd.toISOString().split('T')[0];
  }

  // Set dates in options for clarity
  document.getElementById('report-type').options[0].innerHTML +=
    ` (${getDateWithOffset()})`;
  document.getElementById('report-type').options[1].innerHTML +=
    ` (${getDateWithOffset(1)})`;
  document.getElementById('report-type').options[2].innerHTML +=
    ` (${getWeekStart(getDateWithOffset())} - ${getWeekEnd(getDateWithOffset())})`;
  document.getElementById('report-type').options[3].innerHTML +=
    ` (${getWeekStart(getDateWithOffset(7))} - ${getWeekEnd(getDateWithOffset(7))})`;

  // Format date for display
  function formatDate(dateStr) {
    return new Date(dateStr).toLocaleDateString('en-US', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    });
  }

  // Format date range for display
  function formatDateRange(startDate, endDate) {
    const start = new Date(startDate);
    const end = new Date(endDate);
    return `${start.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} - ${end.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}`;
  }

  // Generate report
  async function generateReport() {
    const reportType = document.getElementById('report-type').value;
    const statusFilter = document.getElementById('status-filter').value;

    try {
      let startDate, endDate;

      if (reportType === 'today') {
        startDate = endDate = getDateWithOffset();
      } else if (reportType === 'tomorrow') {
        startDate = endDate = getDateWithOffset(1);
      } else if (reportType === 'this_week') {
        startDate = getWeekStart(getDateWithOffset());
        endDate = getWeekEnd(getDateWithOffset());
      } else {
        startDate = getWeekStart(getDateWithOffset(7));
        endDate = getWeekEnd(getDateWithOffset(7));
      }

      // Fetch tasks for the date range
      const response = await fetch(
        `/api/reports?start_date=${startDate}&end_date=${endDate}&status=${statusFilter}&time_horizon=${reportType}`
      );

      if (!response.ok) {
        throw new Error('Failed to fetch report data');
      }

      const data = await response.json();
      console.log('Raw data:', data);
      console.log(
        'Todos type:',
        typeof data.todos,
        'Is array:',
        Array.isArray(data.todos)
      );
      console.log('First todo:', data.todos[0]);
      displayReport(data, reportType, startDate, endDate);
    } catch (error) {
      console.error('Error generating report:', error);
      alert('Failed to generate report: ' + error.message);
    }
  }

  // Display report
  function displayReport(data, reportType, startDate, endDate) {
    const container = document.getElementById('report-container');
    const content = document.getElementById('report-content');

    let reportHtml = '';

    if (reportType === 'today' || reportType === 'tomorrow') {
      reportHtml = generateDailyReport(data, startDate);
    } else {
      reportHtml = generateWeeklyReport(data, startDate, endDate);
    }

    content.innerHTML = reportHtml;
    container.classList.remove('hidden');
    document.getElementById('print-report').style.display = 'inline-block';
  }

  // Generate daily report HTML
  function generateDailyReport(data, date) {
    const { todos = [], projects = [] } = data;
    const projectMap = new Map(projects.map((p) => [p.id, p]));

    return `
      <div class="planner-container">
        <div class="planner-header">
          <div class="date-header">
            <h2 class="text-2xl font-bold mb-2">${formatDate(date)}</h2>
          </div>
        </div>
        
        <div class="planner-layout">
          <div class="time-schedule">
            ${generateTimeSlots(todos)}
          </div>
          
          <div class="planner-sidebar">
            <div class="sidebar-section quarter-height">
              <h3 class="sidebar-title large-title">Personal Tasks</h3>
              <div class="priority-content">
                ${generateTasks(todos)}
              </div>
            </div>
            
            <div class="sidebar-section quarter-height">
              <h3 class="sidebar-title large-title">Dropbox Tasks</h3>
              <div class="reminders-content">
              </div>
            </div>
          </div>
        </div>
        
        <div class="notes-section">
          <h3 class="notes-title large-title">Notes</h3>
          <div class="notes-content-full">
            <!-- Space for notes -->
          </div>
        </div>
      </div>
    `;
  }

  // Generate weekly report HTML
  function generateWeeklyReport(data, startDate, endDate) {
    const { todos = [], projects = [] } = data;
    const projectMap = new Map(projects.map((p) => [p.id, p]));

    return `
      <div class="report-header">
        <h2 class="text-2xl font-bold mb-2">Weekly Task Report</h2>
        <p class="text-gray-600 mb-6">${formatDateRange(startDate, endDate)}</p>
      </div>
      
      <div class="report-summary mb-8">
        <div class="grid grid-cols-4 gap-4 text-center">
          <div class="bg-blue-50 p-4 rounded">
            <div class="text-2xl font-bold text-blue-600">${Array.isArray(todos) ? todos.filter((t) => t.status === 'pending').length : 0}</div>
            <div class="text-sm text-gray-600">Pending</div>
          </div>
          <div class="bg-green-50 p-4 rounded">
            <div class="text-2xl font-bold text-green-600">${Array.isArray(todos) ? todos.filter((t) => t.status === 'completed').length : 0}</div>
            <div class="text-sm text-gray-600">Completed</div>
          </div>
          <div class="bg-gray-50 p-4 rounded">
            <div class="text-2xl font-bold text-gray-600">${Array.isArray(todos) ? todos.reduce((sum, t) => sum + (parseFloat(t.estimated_hours) || 0), 0).toFixed(1) : '0.0'}</div>
            <div class="text-sm text-gray-600">Est. Hours</div>
          </div>
          <div class="bg-purple-50 p-4 rounded">
            <div class="text-2xl font-bold text-purple-600">${Array.isArray(todos) ? todos.reduce((sum, t) => sum + (parseFloat(t.actual_hours) || 0), 0).toFixed(1) : '0.0'}</div>
            <div class="text-sm text-gray-600">Actual Hours</div>
          </div>
        </div>
      </div>
      
      ${generateTasksByProject(todos, projectMap)}
    `;
  }

  // Generate time slots for daily planner
  function generateTimeSlots(todos = []) {
    const timeSlots = [];
    for (let hour = 6; hour <= 21; hour++) {
      const timeStr = `${hour.toString().padStart(2, '0')}:00`;
      timeSlots.push(timeStr);
    }

    let html = '<div class="time-slots">';
    timeSlots.forEach((time) => {
      const tasksForTime = todos.filter((todo) => {
        if (todo.due_date) {
          const dueTime = new Date(todo.due_date).getHours();
          const slotHour = time === '00:00' ? 0 : parseInt(time.split(':')[0]);
          return dueTime === slotHour;
        }
        return false;
      });

      html += `
        <div class="time-slot">
          <div class="time-label">${time}</div>
          <div class="time-underline"></div>
        </div>
      `;
    });
    html += '</div>';
    return html;
  }

  // Generate priority tasks
  function generateTasks(todos = []) {
    const highPriorityTasks = todos;
    if (highPriorityTasks.length === 0)
      return '<div class="empty-content">No high priority tasks</div>';

    let html = '<div class="priority-tasks">';
    highPriorityTasks.forEach((todo) => {
      const statusIcon = todo.status === 'completed' ? '✓' : '☐';
      html += `
        <div class="priority-task">
          <span class="task-checkbox">${statusIcon}</span>
          <span class="task-title">${todo.title}</span>
        </div>
      `;
    });
    html += '</div>';
    return html;
  }

  // Generate tasks grouped by project
  function generateTasksByProject(todos = [], projectMap) {
    const todosByProject = todos.reduce((acc, todo) => {
      const projectName = todo.project_id
        ? projectMap.get(todo.project_id)?.name || 'Unknown Project'
        : 'No Project';
      if (!acc[projectName]) acc[projectName] = [];
      acc[projectName].push(todo);
      return acc;
    }, {});

    let html = '<div class="tasks-section">';

    Object.entries(todosByProject).forEach(([projectName, projectTodos]) => {
      const project = projectTodos[0].project_id
        ? projectMap.get(projectTodos[0].project_id)
        : null;

      html += `
        <div class="project-section mb-6 page-break-inside-avoid">
          <h3 class="text-lg font-semibold mb-3 pb-2 border-b-2" ${project ? `style="border-color: ${project.color}"` : ''}>
            ${projectName}
          </h3>
          <div class="task-list space-y-2">
      `;

      projectTodos.forEach((todo) => {
        const statusIcon = todo.status === 'completed' ? '✓' : '☐';
        const statusClass =
          todo.status === 'completed' ? 'text-green-600' : 'text-gray-600';

        html += `
          <div class="task-item flex items-start gap-3 p-3 border-l-4 bg-gray-50" style="border-left-color: ${project?.color || '#e5e7eb'}">
            <span class="${statusClass} font-bold text-lg">${statusIcon}</span>
            <div class="flex-1">
              <div class="font-medium ${todo.status === 'completed' ? 'line-through text-gray-500' : ''}">${todo.title}</div>
              ${todo.description ? `<div class="text-sm text-gray-600 mt-1">${todo.description}</div>` : ''}
              <div class="text-xs text-gray-500 mt-1">
                Priority: ${todo.priority} | Est: ${todo.estimated_hours}h
                ${todo.actual_hours ? ` | Actual: ${todo.actual_hours}h` : ''}
                ${todo.due_date ? ` | Due: ${new Date(todo.due_date).toLocaleDateString()}` : ''}
              </div>
            </div>
          </div>
        `;
      });

      html += '</div></div>';
    });

    html += '</div>';
    return html;
  }

  // Print/Export PDF report
  function printReport() {
    const reportContent = document.getElementById('report-content');
    const printWindow = window.open('', '_blank');

    printWindow.document.write(`
      <!DOCTYPE html>
      <html>
        <head>
          <title>Daily Planner</title>
          <style>
            ${getPrintStyles()}
          </style>
        </head>
        <body>
          ${reportContent.innerHTML}
        </body>
      </html>
    `);

    printWindow.document.close();
    setTimeout(() => {
      printWindow.print();
      printWindow.close();
    }, 250);
  }

  // Enhanced PDF export with better filename
  function exportToPDF() {
    const reportType = document.getElementById('report-type').value;
    const date =
      reportType === 'today'
        ? new Date().toISOString().split('T')[0]
        : reportType === 'tomorrow'
          ? new Date(Date.now() + 86400000).toISOString().split('T')[0]
          : 'weekly';

    const reportContent = document.getElementById('report-content');
    const printWindow = window.open('', '_blank');

    printWindow.document.write(`
      <!DOCTYPE html>
      <html>
        <head>
          <title>Daily Planner - ${date}</title>
          <style>
            ${getPrintStyles()}
          </style>
        </head>
        <body>
          ${reportContent.innerHTML}
        </body>
      </html>
    `);

    printWindow.document.close();
    setTimeout(() => {
      printWindow.print();
      printWindow.close();
    }, 250);
  }

  // Get print-optimized styles for planner layout
  function getPrintStyles() {
    return `
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }
      
      body {
        font-family: Arial, sans-serif;
        font-size: 12px;
        line-height: 1.4;
        color: #000;
        background: white;
        padding: 15px;
        max-width: 100%;
        margin: 0 auto;
      }
      
      .planner-container {
        max-width: 100%;
        padding: 0;
        font-family: Arial, sans-serif;
        background: white;
      }

      .planner-header {
        border-bottom: 2px solid #000;
        padding-bottom: 10px;
        margin-bottom: 15px;
      }

      .date-header h2 {
        margin: 0;
        font-size: 20px;
        font-weight: bold;
      }

      .day-indicators {
        display: flex;
        gap: 10px;
        margin-top: 8px;
      }

      .day-letter {
        width: 25px;
        height: 25px;
        display: flex;
        align-items: center;
        justify-content: center;
        border: 1px solid #000;
        background: #f9f9f9;
        font-weight: bold;
        font-size: 10px;
      }

      .day-letter.active {
        background: #000;
        color: white;
      }

      .planner-layout {
        display: grid;
        grid-template-columns: 1fr 200px;
        gap: 15px;
        min-height: 400px;
      }

      .time-schedule {
        border-right: 1px solid #000;
        padding-right: 15px;
      }

      .time-slots {
        display: flex;
        flex-direction: column;
      }

      .time-slot {
        display: grid;
        grid-template-columns: 50px 1fr;
        min-height: 25px;
        align-items: start;
        margin-bottom: 6px;
      }

      .time-underline {
        border-bottom: 1px solid #ccc;
        margin-top: 8px;
        margin-left: 8px;
        height: 1px;
      }

      .quarter-height {
        height: 150px;
      }

      .large-title {
        font-size: 20px !important;
        padding: 8px 10px;
      }

      .notes-section {
        margin-top: 20px;
        border: 1px solid #000;
        background: #f9f9f9;
        min-height: 300px;
      }

      .notes-title {
        background: #e0e0e0;
        padding: 8px 10px;
        margin: 0;
        font-size: 20px;
        font-weight: bold;
        border-bottom: 1px solid #000;
      }

      .notes-content-full {
        padding: 12px;
        min-height: 250px;
        background: white;
        margin: 4px;
        border: 1px solid #ccc;
      }

      .time-label {
        font-weight: bold;
        padding: 6px 0;
        font-size: 10px;
      }

      .time-content {
        padding: 6px 0;
        border-left: 1px solid #ccc;
        padding-left: 8px;
        min-height: 24px;
      }

      .time-task {
        font-size: 10px;
        padding: 1px 0;
        color: #333;
      }

      .planner-sidebar {
        display: flex;
        flex-direction: column;
        gap: 15px;
      }

      .sidebar-section {
        border: 1px solid #000;
        background: #f9f9f9;
      }

      .sidebar-title {
        background: #e0e0e0;
        padding: 6px 8px;
        margin: 0;
        font-size: 12px;
        font-weight: bold;
        border-bottom: 1px solid #000;
      }

      .priority-content,
      .reminders-content,
      .notes-content,
      .tomorrow-content {
        padding: 8px;
        min-height: 50px;
        background: white;
      }

      .priority-task {
        display: flex;
        align-items: center;
        gap: 6px;
        margin-bottom: 6px;
        font-size: 10px;
      }

      .task-checkbox {
        width: 12px;
        height: 12px;
        border: 1px solid #000;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 8px;
      }

      .reminder-item {
        display: flex;
        gap: 6px;
        margin-bottom: 6px;
        font-size: 10px;
      }

      .reminder-time {
        font-weight: bold;
        min-width: 40px;
      }

      .empty-content {
        color: #999;
        font-size: 10px;
        font-style: italic;
      }

      .notes-content {
        min-height: 80px;
        background: white;
        border: 1px solid #ccc;
        margin: 4px;
      }

      .tomorrow-content {
        min-height: 60px;
        background: white;
        border: 1px solid #ccc;
        margin: 4px;
      }

      @media print {
        @page {
          size: A4;
          margin: 0.5in;
        }
        
        body {
          padding: 0;
          font-size: 11px;
        }
        
        .planner-container {
          padding: 0;
        }
        
        .planner-layout {
          grid-template-columns: 1fr 180px;
          gap: 12px;
        }
        
        .time-slot {
          min-height: 25px;
        }
        
        .time-label {
          font-size: 9px;
        }
        
        .time-content {
          min-height: 20px;
        }
        
        .time-task {
          font-size: 9px;
        }
        
        .sidebar-title {
          font-size: 11px;
          padding: 5px 6px;
        }
        
        .priority-content,
        .reminders-content,
        .notes-content,
        .tomorrow-content {
          padding: 6px;
          min-height: 40px;
        }
        
        .priority-task,
        .reminder-item {
          font-size: 9px;
        }
        
        .notes-content {
          min-height: 70px;
        }
        
        .tomorrow-content {
          min-height: 50px;
        }
      }
    `;
  }

  // Initialize
  document.addEventListener('DOMContentLoaded', function () {
    // Event listeners
    document
      .getElementById('generate-report')
      .addEventListener('click', generateReport);
    document
      .getElementById('print-report')
      .addEventListener('click', exportToPDF);
  });
</script>

<style>
  .print-content {
    padding: 2rem;
  }

  /* Planner Layout Styles */
  .planner-container {
    max-width: 8.5in;
    margin: 0 auto;
    background: white;
    padding: 20px;
    font-family: Arial, sans-serif;
  }

  .planner-header {
    border-bottom: 2px solid #000;
    padding-bottom: 10px;
    margin-bottom: 20px;
  }

  .date-header h2 {
    margin: 0;
    font-size: 24px;
    font-weight: bold;
  }

  .day-indicators {
    display: flex;
    gap: 15px;
    margin-top: 10px;
  }

  .day-letter {
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    border: 1px solid #ccc;
    background: #f9f9f9;
    font-weight: bold;
  }

  .day-letter.active {
    background: #000;
    color: white;
  }

  .planner-layout {
    display: grid;
    grid-template-columns: 1fr 300px;
    gap: 20px;
    min-height: 50vh;
  }

  .time-schedule {
    border-right: 2px solid #000;
    padding-right: 20px;
  }

  .time-slots {
    display: flex;
    flex-direction: column;
  }

  .time-slot {
    display: grid;
    grid-template-columns: 60px 1fr;
    min-height: 40px;
    align-items: start;
    margin-bottom: 8px;
  }

  .time-label {
    font-weight: bold;
    padding: 8px 0;
    font-size: 12px;
  }

  .time-underline {
    border-bottom: 1px solid #ccc;
    margin-top: 12px;
    margin-left: 10px;
    height: 1px;
  }

  .time-task {
    font-size: 12px;
    padding: 2px 0;
    color: #333;
  }

  .planner-sidebar {
    display: flex;
    flex-direction: column;
    gap: 20px;
  }

  .sidebar-section {
    border: 1px solid #ccc;
    background: #f9f9f9;
  }

  .quarter-height {
    height: 22vh;
  }

  .sidebar-title {
    background: #e0e0e0;
    padding: 8px 12px;
    margin: 0;
    font-size: 14px;
    font-weight: bold;
    border-bottom: 1px solid #ccc;
  }

  .large-title {
    font-size: 28px !important;
    padding: 12px 16px;
  }

  .priority-content,
  .reminders-content,
  .notes-content,
  .tomorrow-content {
    padding: 12px;
    min-height: 80px;
  }

  .priority-task {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-bottom: 8px;
    font-size: 12px;
  }

  .task-checkbox {
    width: 16px;
    height: 16px;
    border: 1px solid #666;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 10px;
  }

  .reminder-item {
    display: flex;
    gap: 8px;
    margin-bottom: 8px;
    font-size: 12px;
  }

  .reminder-time {
    font-weight: bold;
    min-width: 50px;
  }

  .empty-content {
    color: #999;
    font-size: 12px;
    font-style: italic;
  }

  .notes-content {
    min-height: 120px;
    background: white;
    border: 1px solid #ddd;
    margin: 8px;
  }

  .tomorrow-content {
    min-height: 100px;
    background: white;
    border: 1px solid #ddd;
    margin: 8px;
  }

  .notes-section {
    margin-top: 30px;
    border: 1px solid #ccc;
    background: #f9f9f9;
    min-height: 40vh;
  }

  .notes-title {
    background: #e0e0e0;
    padding: 12px 16px;
    margin: 0;
    font-size: 28px;
    font-weight: bold;
    border-bottom: 1px solid #ccc;
  }

  .notes-content-full {
    padding: 20px;
    min-height: 35vh;
    background: white;
    margin: 8px;
    border: 1px solid #ddd;
  }

  @media print {
    .container,
    .max-w-4xl,
    nav,
    .bg-white:not(.print-content) {
      display: none;
    }

    .print-content {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      padding: 0;
      box-shadow: none;
      border: none;
    }

    .planner-container {
      max-width: 100%;
      padding: 15px;
      font-size: 12px;
    }

    .planner-layout {
      grid-template-columns: 1fr 250px;
      gap: 15px;
      min-height: 40vh;
    }

    .quarter-height {
      height: 18vh;
    }

    .time-slot {
      min-height: 30px;
      margin-bottom: 6px;
    }

    .time-underline {
      margin-top: 10px;
    }

    .large-title {
      font-size: 24px !important;
      padding: 10px 12px;
    }

    .notes-section {
      min-height: 35vh;
      margin-top: 20px;
    }

    .notes-content-full {
      min-height: 30vh;
      padding: 15px;
    }

    .time-label {
      font-size: 11px;
    }

    .time-content {
      min-height: 27px;
    }

    .time-task {
      font-size: 11px;
    }

    .sidebar-title {
      font-size: 12px;
      padding: 6px 10px;
    }

    .priority-content,
    .reminders-content,
    .notes-content,
    .tomorrow-content {
      padding: 10px;
      min-height: 60px;
    }

    .priority-task,
    .reminder-item {
      font-size: 11px;
    }

    .notes-content {
      min-height: 100px;
    }

    .tomorrow-content {
      min-height: 80px;
    }

    .page-break-inside-avoid {
      page-break-inside: avoid;
    }
  }
</style>
