name: Security Scan

permissions:
  contents: read
  security-events: write  # Critical for SARIF upload
  pull-requests: write  # Needed for leaving PR comments

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM UTC
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  security-basics:
    name: Basic Security Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # NPM Audit
      - name: NPM Audit
        id: npm-audit
        run: |
          echo "### NPM Audit Results ###" > security-report.txt
          npm audit --production --json > npm-audit.json || true
          npm audit --production >> security-report.txt 2>&1 || true
          
          # Check for high/critical vulnerabilities
          HIGH_VULN=$(cat npm-audit.json | jq '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULN=$(cat npm-audit.json | jq '.metadata.vulnerabilities.critical // 0')
          
          echo "high_count=$HIGH_VULN" >> $GITHUB_OUTPUT
          echo "critical_count=$CRITICAL_VULN" >> $GITHUB_OUTPUT
          
          if [ "$CRITICAL_VULN" -gt 0 ]; then
            echo "❌ Found $CRITICAL_VULN critical vulnerabilities!"
            exit 1
          elif [ "$HIGH_VULN" -gt 0 ]; then
            echo "⚠️ Found $HIGH_VULN high vulnerabilities"
          else
            echo "✅ No high or critical vulnerabilities found"
          fi

      # License Check
      - name: License Check
        continue-on-error: true
        run: |
          npx license-checker --production --summary --excludePrivatePackages >> security-report.txt
          echo -e "\n### Problematic Licenses ###" >> security-report.txt
          npx license-checker --production --excludePrivatePackages --onlyAllow "MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;CC0-1.0;CC-BY-3.0;CC-BY-4.0;Unlicense;Python-2.0" >> security-report.txt 2>&1 || echo "Some non-standard licenses found" >> security-report.txt

      # Basic Secret Detection
      - name: Secret Detection
        run: |
          echo -e "\n### Secret Detection ###" >> security-report.txt
          
          # Common patterns to check
          patterns=(
            "password.*=.*['\"][^'\"]{8,}['\"]"
            "api[_-]?key.*=.*['\"][^'\"]{20,}['\"]"
            "secret.*=.*['\"][^'\"]{20,}['\"]"
            "token.*=.*['\"][^'\"]{20,}['\"]"
            "private[_-]?key"
            "BEGIN.*PRIVATE KEY"
          )
          
          found_secrets=0
          for pattern in "${patterns[@]}"; do
            if grep -r -E "$pattern" --exclude-dir=node_modules --exclude-dir=.git --exclude="*.test.js" . 2>/dev/null; then
              echo "⚠️ Potential secret found with pattern: $pattern" >> security-report.txt
              found_secrets=1
            fi
          done
          
          if [ $found_secrets -eq 0 ]; then
            echo "✅ No obvious secrets detected" >> security-report.txt
          fi

      - name: Upload security report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-basics-report
          path: |
            security-report.txt
            npm-audit.json

  code-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-extended

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          output: 'trivy-report.txt'

      - name: Run Trivy in SARIF mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif
          category: trivy

      - name: Upload Trivy text report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-report
          path: trivy-report.txt

  summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [security-basics, code-analysis, trivy-scan]
    if: always()
    permissions:
      contents: read
      issues: write
      pull-requests: write
    steps:
      - name: Create summary
        run: |
          echo "# 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Basic Security | ${{ needs.security-basics.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Analysis | ${{ needs.code-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Trivy Scan | ${{ needs.trivy-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.security-basics.result }}" == "failure" ] || [ "${{ needs.code-analysis.result }}" == "failure" ] || [ "${{ needs.trivy-scan.result }}" == "failure" ]; then
            echo "❌ **Security issues detected!** Please review the detailed reports." >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **All security checks passed!**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v8
        with:
          script: |
            const summary = `## 🔒 Security Scan Results
            
            | Check | Status |
            |-------|--------|
            | Basic Security | ${{ needs.security-basics.result }} |
            | Code Analysis | ${{ needs.code-analysis.result }} |
            | Trivy Scan | ${{ needs.trivy-scan.result }} |
            
            View the [full security report](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  claude-code:
    name: Claude Security Reviewer
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          fetch-depth: 2
      
      - uses: anthropics/claude-code-security-review@main
        with:
          comment-pr: true
          claude-api-key: ${{ secrets.CLAUDE_API_KEY }}

