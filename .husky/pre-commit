#!/bin/sh
echo "üîí Running security checks..."

# Colors (work in most terminals)
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

FAILED=0

# 1. Check for obvious secrets with file details
echo "1. Checking for secrets..."
SECRET_FOUND=0

# Get staged files
STAGED_FILES=$(git diff --cached --name-only)

for file in $STAGED_FILES; do
    # Skip binary files
    if [ -f "$file" ] && file "$file" 2>/dev/null | grep -q text; then
        # Skip test files and examples
        case "$file" in
            *test*|*spec*|*.example|*.sample|.env.example) continue ;;
        esac
        
        # Check for various secret patterns and show which pattern matched
        if grep -n -E "password.*=.*['\"][^'\"]{8,}['\"]" "$file" 2>/dev/null; then
            echo "${RED}  ‚úó Potential password found in: $file${NC}"
            SECRET_FOUND=1
        fi
        
        if grep -n -E "api[_-]?key.*=.*['\"][^'\"]{20,}['\"]" "$file" 2>/dev/null; then
            echo "${RED}  ‚úó Potential API key found in: $file${NC}"
            SECRET_FOUND=1
        fi
        
        if grep -n -E "(secret|token).*=.*['\"][^'\"]{20,}['\"]" "$file" 2>/dev/null; then
            echo "${RED}  ‚úó Potential secret/token found in: $file${NC}"
            SECRET_FOUND=1
        fi
        
        if grep -n -E "-----BEGIN.*PRIVATE KEY-----" "$file" 2>/dev/null; then
            echo "${RED}  ‚úó Private key found in: $file${NC}"
            SECRET_FOUND=1
        fi
        
        # AWS specific patterns
        if grep -n -E "AKIA[0-9A-Z]{16}" "$file" 2>/dev/null; then
            echo "${RED}  ‚úó Potential AWS access key found in: $file${NC}"
            SECRET_FOUND=1
        fi
    fi
done

if [ $SECRET_FOUND -eq 1 ]; then
    FAILED=1
    echo "${RED}  ‚ùå Secrets detected! See above for details.${NC}"
else
    echo "${GREEN}  ‚úÖ No secrets detected${NC}"
fi

# 2. Check for console.log with file list
echo "2. Checking for console.log statements..."
CONSOLE_FILES=""
CONSOLE_COUNT=0

for file in $STAGED_FILES; do
    case "$file" in
        *.js|*.jsx|*.ts|*.tsx)
            # Skip test files
            case "$file" in
                *test*|*spec*) continue ;;
            esac
            
            if [ -f "$file" ]; then
                count=$(grep -c "console\." "$file" 2>/dev/null || echo 0)
                if [ $count -gt 0 ]; then
                    CONSOLE_FILES="${CONSOLE_FILES}    - $file ($count occurrences)\n"
                    CONSOLE_COUNT=$((CONSOLE_COUNT + count))
                fi
            fi
            ;;
    esac
done

if [ $CONSOLE_COUNT -gt 0 ]; then
    echo "${YELLOW}  ‚ö†Ô∏è  Found $CONSOLE_COUNT console statements in:${NC}"
    printf "$CONSOLE_FILES"
else
    echo "${GREEN}  ‚úÖ No console statements${NC}"
fi

# 3. Check for dangerous patterns with file details
echo "3. Checking for dangerous code patterns..."
DANGEROUS_COUNT=0

for file in $STAGED_FILES; do
    case "$file" in
        *.js|*.jsx|*.ts|*.tsx)
            if [ -f "$file" ]; then
                # Check and report each dangerous pattern
                if grep -n "eval(" "$file" 2>/dev/null; then
                    echo "${YELLOW}  ‚ö†Ô∏è  Found eval() in: $file${NC}"
                    DANGEROUS_COUNT=$((DANGEROUS_COUNT + 1))
                fi
                
                if grep -n "innerHTML\s*=" "$file" 2>/dev/null; then
                    echo "${YELLOW}  ‚ö†Ô∏è  Found innerHTML in: $file${NC}"
                    DANGEROUS_COUNT=$((DANGEROUS_COUNT + 1))
                fi
                
                if grep -n "document\.write(" "$file" 2>/dev/null; then
                    echo "${YELLOW}  ‚ö†Ô∏è  Found document.write() in: $file${NC}"
                    DANGEROUS_COUNT=$((DANGEROUS_COUNT + 1))
                fi
            fi
            ;;
    esac
done

if [ $DANGEROUS_COUNT -eq 0 ]; then
    echo "${GREEN}  ‚úÖ No dangerous patterns detected${NC}"
fi

# 4. SQL injection check with details
echo "4. Checking for SQL injection patterns..."
SQL_FOUND=0

for file in $STAGED_FILES; do
    case "$file" in
        *.js|*.jsx|*.ts|*.tsx)
            if [ -f "$file" ] && grep -n -E "(query|execute)\([^)]*\+" "$file" 2>/dev/null; then
                echo "${YELLOW}  ‚ö†Ô∏è  Potential SQL injection in: $file${NC}"
                echo "     (String concatenation in query)"
                SQL_FOUND=1
            fi
            ;;
    esac
done

if [ $SQL_FOUND -eq 0 ]; then
    echo "${GREEN}  ‚úÖ No SQL injection patterns detected${NC}"
fi

# 5. Quick dependency check if package.json changed
if echo "$STAGED_FILES" | grep -q "package.*json"; then
    echo "5. Checking dependencies..."
    if ! npm audit --production --audit-level=critical 2>&1 | grep -q "found 0 vulnerabilities"; then
        echo "${RED}  ‚ùå Critical vulnerabilities in dependencies!${NC}"
        echo "     Run 'npm audit' for details"
        FAILED=1
    else
        echo "${GREEN}  ‚úÖ No critical vulnerabilities${NC}"
    fi
fi

# Summary
echo ""
if [ $FAILED -eq 1 ]; then
    echo "${RED}‚ùå Security checks failed!${NC}"
    echo ""
    echo "Options:"
    echo "  1. Fix the issues above"
    echo "  2. Use 'git commit --no-verify' to bypass (NOT RECOMMENDED)"
    exit 1
else
    echo "${GREEN}‚úÖ All security checks passed!${NC}"
fi
